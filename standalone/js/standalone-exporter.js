// Simple PDF and document export functionality for standalone version
class StandaloneExporter {
    constructor() {
        this.watermark = '';
    }

    // Export document as HTML
    exportAsHTML(title, content) {
        const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 48px;
            color: rgba(0, 0, 0, 0.1);
            z-index: -1;
            pointer-events: none;
        }
        @media print {
            .watermark {
                position: absolute;
            }
        }
    </style>
</head>
<body>
    ${this.watermark ? `<div class="watermark">${this.watermark}</div>` : ''}
    <h1>${title}</h1>
    <div class="content">
        ${content}
    </div>
    <footer style="margin-top: 50px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666;">
        Generated by Web Docs Editor - ${new Date().toLocaleDateString()}
    </footer>
</body>
</html>`;

        this.downloadFile(htmlContent, `${title}.html`, 'text/html');
    }

    // Export document as RTF (Rich Text Format)
    exportAsRTF(title, content) {
        // Convert HTML to RTF
        const rtfContent = this.htmlToRTF(content);
        const rtfDocument = `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
{\\colortbl ;\\red0\\green0\\blue0;}
\\f0\\fs24 {\\b ${title}\\par}\\par
${rtfContent}
}`;

        this.downloadFile(rtfDocument, `${title}.rtf`, 'application/rtf');
    }

    // Simple HTML to RTF conversion
    htmlToRTF(html) {
        let rtf = html;
        
        // Convert common HTML tags to RTF
        rtf = rtf.replace(/<b>(.*?)<\/b>/g, '{\\b $1}');
        rtf = rtf.replace(/<strong>(.*?)<\/strong>/g, '{\\b $1}');
        rtf = rtf.replace(/<i>(.*?)<\/i>/g, '{\\i $1}');
        rtf = rtf.replace(/<em>(.*?)<\/em>/g, '{\\i $1}');
        rtf = rtf.replace(/<u>(.*?)<\/u>/g, '{\\ul $1}');
        rtf = rtf.replace(/<h1>(.*?)<\/h1>/g, '{\\b\\fs32 $1}\\par');
        rtf = rtf.replace(/<h2>(.*?)<\/h2>/g, '{\\b\\fs28 $1}\\par');
        rtf = rtf.replace(/<h3>(.*?)<\/h3>/g, '{\\b\\fs24 $1}\\par');
        rtf = rtf.replace(/<p>(.*?)<\/p>/g, '$1\\par');
        rtf = rtf.replace(/<br\s*\/?>/g, '\\par');
        rtf = rtf.replace(/<div>(.*?)<\/div>/g, '$1\\par');
        
        // Remove remaining HTML tags
        rtf = rtf.replace(/<[^>]*>/g, '');
        
        return rtf;
    }

    // Export document as plain text
    exportAsText(title, content) {
        const plainText = this.htmlToText(content);
        const textContent = `${title}\n${'='.repeat(title.length)}\n\n${plainText}\n\n---\nGenerated by Web Docs Editor - ${new Date().toLocaleDateString()}`;
        
        this.downloadFile(textContent, `${title}.txt`, 'text/plain');
    }

    // Convert HTML to plain text
    htmlToText(html) {
        const div = document.createElement('div');
        div.innerHTML = html;
        return div.textContent || div.innerText || '';
    }

    // Simple print functionality
    printDocument(title, content) {
        const printWindow = window.open('', '_blank');
        const printContent = `<!DOCTYPE html>
<html>
<head>
    <title>${title}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: none;
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }
        h1 { font-size: 24px; margin-bottom: 20px; }
        h2 { font-size: 20px; margin: 20px 0 10px 0; }
        h3 { font-size: 18px; margin: 15px 0 8px 0; }
        p { margin: 10px 0; }
        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 48px;
            color: rgba(0, 0, 0, 0.1);
            z-index: -1;
            pointer-events: none;
        }
    </style>
</head>
<body>
    ${this.watermark ? `<div class="watermark">${this.watermark}</div>` : ''}
    <h1>${title}</h1>
    ${content}
</body>
</html>`;

        printWindow.document.write(printContent);
        printWindow.document.close();
        printWindow.print();
    }

    // Download file helper
    downloadFile(content, filename, mimeType) {
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    // Set watermark for exports
    setWatermark(watermark) {
        this.watermark = watermark;
    }

    // Export as PDF using browser's print to PDF
    exportAsPDF(title, content) {
        // Create a new window for PDF export
        const pdfWindow = window.open('', '_blank');
        const pdfContent = `<!DOCTYPE html>
<html>
<head>
    <title>${title}</title>
    <style>
        @page {
            size: A4;
            margin: 1in;
        }
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }
        h1 {
            color: #333;
            border-bottom: 2px solid #333;
            padding-bottom: 10px;
        }
        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 48px;
            color: rgba(0, 0, 0, 0.1);
            z-index: -1;
            pointer-events: none;
        }
        .footer {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 10px;
            color: #666;
        }
        @media print {
            .no-print { display: none; }
        }
    </style>
</head>
<body>
    ${this.watermark ? `<div class="watermark">${this.watermark}</div>` : ''}
    <h1>${title}</h1>
    <div class="content">
        ${content}
    </div>
    <div class="footer">
        Generated by Web Docs Editor - ${new Date().toLocaleDateString()}
    </div>
    <div class="no-print" style="position: fixed; top: 10px; right: 10px; z-index: 1000;">
        <button onclick="window.print();" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
            Print/Save as PDF
        </button>
        <button onclick="window.close();" style="padding: 10px 20px; background: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px;">
            Close
        </button>
    </div>
</body>
</html>`;

        pdfWindow.document.write(pdfContent);
        pdfWindow.document.close();
        
        // Instructions for user
        alert('A new window opened with your document. Use your browser\'s print function and select "Save as PDF" to export as PDF.');
    }
}

// Create global exporter instance
const standaloneExporter = new StandaloneExporter();